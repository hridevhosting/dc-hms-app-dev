import{b as t,c as m}from"./chunk-5JUHOLWQ.js";import{z as a}from"./chunk-N4ANQEKW.js";import{Q as l,V as s}from"./chunk-ZPID5U3R.js";var q=(()=>{class n{constructor(i,e){this._httpClient=i,this._commonService=e}getAppointmentDetailsByAppointmentId(i){let e=`select * from tblAppointment where AppointmentId = ${i} and Active = 1`,r=this._commonService.generateApiRequestParam(t.sqlFunNameList.select,null,e);return this._httpClient.post(t.apiUrl+t.sqlController,r)}getAppointmentDetailsByAppointmentIdPatientId(i,e){let r=`select * from tblAppointment where EntityId = ${e} and AppointmentId = ${i} and Active = 1`,o=this._commonService.generateApiRequestParam(t.sqlFunNameList.select,null,r);return this._httpClient.post(t.apiUrl+t.sqlController,o)}getPreviousAppointmentListByPatientId(i){let e=`select * from tblAppointment where EntityId = ${i} and whichopd like 'opd' and Active = 1 order by AppointmentId desc`,r=this._commonService.generateApiRequestParam(t.sqlFunNameList.select,null,e);return this._httpClient.post(t.apiUrl+t.sqlController,r)}getAppointmentReasonConsultantDoctorReferralDoctorDepartmentList(){let e=this._commonService.generateApiRequestParam(t.sqlFunNameList.select,null,`
      select listtype,listItem from tbllistitems where listtype ='Appointment Reason' and Active=1;
      select 'Consultant Doctor',UserName  from tblUser where [role]='Doctor';
      select listtype,listItem from tbllistitems where listtype ='ReferralDoctor' and Active=1;
      select listtype,listItem from tbllistitems where listtype ='DEPARTMENT' and Active=1;
      select  bookedfor, department, referredby, (select value from conf_txt where ConfName='Appointment_DefaultDoctor') as Appointment_DefaultDoctor
      from tblappointment where AppointmentId=(select MAX(appointmentid) from tblappointment where isrecurring=0 and entityid=10 and active=1);
    `);return this._httpClient.post(t.apiUrl+t.sqlController,e)}static{this.\u0275fac=function(e){return new(e||n)(s(a),s(m))}}static{this.\u0275prov=l({token:n,factory:n.\u0275fac,providedIn:"root"})}}return n})();var _=(()=>{class n{constructor(i,e){this._httpClient=i,this._commonService=e}getAddmissionHistoryByPatientAdmissionId(i){let e=`select tap.AdmissionProcId, tap.AdmissionId, tap.ProcId, tap.ProcDate, tap.CreatedBy, tl.ListType as 'ProcType', tl.ListItem as 'ProcName', tap.Active, tap.Remarks from tblAdmissionProc tap inner join tblListItems tl on tap.ProcId = tl.ListItemId where tap.AdmissionId = ${i} order by CreatedAt desc`,r=this._commonService.generateApiRequestParam(t.sqlFunNameList.select,null,e);return this._httpClient.post(t.apiUrl+t.sqlController,r)}getNoteHistoryByPatientAdmissionIdNoteType(i,e){let r=`
    select distinct convert(nvarchar(11), ProcDate,113) as ProcName
    ,COUNT(*) noofentries ,max(ProcDate)  from tblAdmissionProc
    where AdmissionId=${i} 
 and  active=1
    --and REMARKS IN ('${e.toUpperCase()}') 

    group by convert(nvarchar(11), ProcDate,113)
    
 order by 3 desc`,o=this._commonService.generateApiRequestParam(t.sqlFunNameList.select,null,r);return this._httpClient.post(t.apiUrl+t.sqlController,o)}getLastAppointmentId(){let e=this._commonService.generateApiRequestParam(t.sqlFunNameList.select,null,`
     select top 1 AppointmentId from tblAppointment order by AppointmentId desc`);return this._httpClient.post(t.apiUrl+t.sqlController,e)}getAppointmentDetailsByAppointmentIdPatientId(i,e){let r=`select * from tblAppointment where EntityId = ${e} and AppointmentId = ${i} and Active = 1`,o=this._commonService.generateApiRequestParam(t.sqlFunNameList.select,null,r);return this._httpClient.post(t.apiUrl+t.sqlController,o)}getAddmissionDetailsByAdmissionIdPatientId(i,e){let r=`select * from tblAdmission where PatientId = ${e} and AdmissionId = ${i} and Active = 1`,o=this._commonService.generateApiRequestParam(t.sqlFunNameList.select,null,r);return this._httpClient.post(t.apiUrl+t.sqlController,o)}getPreviousAdmissionListByPatientId(i){let e=`select * from tblAdmission where PatientId = ${i} and Active = 1 order by AdmissionId desc`,r=this._commonService.generateApiRequestParam(t.sqlFunNameList.select,null,e);return this._httpClient.post(t.apiUrl+t.sqlController,r)}getNotesList(i,e,r,o){let p=`
    SELECT AdmissionProcId, AdmissionId ,ProcId, ProcDate, Remarks, Active, CreatedBy,
    dbo.getAllDataParagraph(AdmissionProcId) as data FROM TBLADMISSIONPROC P
    WHERE P.Active =1 AND REMARKS IN ('${i}') AND ADMISSIONID=${e} and procdate between '${r}'
    and DATEADD(second, -1, (DATEADD(day, 1, '${o}')))ORDER BY procdate DESC
    `,c=this._commonService.generateApiRequestParam(t.sqlFunNameList.select,null,p);return this._httpClient.post(t.apiUrl+t.sqlController,c)}static{this.\u0275fac=function(e){return new(e||n)(s(a),s(m))}}static{this.\u0275prov=l({token:n,factory:n.\u0275fac,providedIn:"root"})}}return n})();export{q as a,_ as b};
